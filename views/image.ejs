<h1><%=url%></h1>

<canvas id="hotspot_image" width="<%=width%>" height="<%=height%>" name="hotspot_image"
    style="cursor:crosshair;background:url(<%=url%>);background-size:contain;background-repeat: no-repeat"></canvas>

<form method="post" action="/uploadCertificate/resize/uploads/<%=name%>">
    <h1>Width of image</h1>
    <p id="widt"><%=width%></p>
    <h1>Height of image</h1>
    <p id="heig"><%=height%></p>
    <!-- <input type="submit" value="Preview Image" /> -->

    <input type="hidden" id="xStart" name="a">
    <input type="hidden" id="yStart" name="b">
    <input type="hidden" id="wid" name="c">
    <input type="hidden" id="hei" name="d"> 
    <!-- Font Color -->
    <h2>Font Color</h2>
    <input name="Color Picker" id="oh" type="color" onchange="changeFontColor()" />
    <input id="h" name="fontColor" value="#000000" />

    <!-- Font Size -->
    <h2>Font-Size</h2>
    <input type="number" id="fSize" name="fontSize" value="80" />
    <button type="submit">Mortal Kombat</button>
    <!-- <button type="button" onclick="getHim()">Get Him</button> -->
</form>
    <input type="hidden" value="<%=keys%>" id="myKeys">
<!-- <button type="button" onclick="fo()">Submit Form</button> -->
<!-- <h2 id="myDIV">Preview</h2>
<img src="../modified/output-7-3-2020.png" id="ima"> -->
<script>
    // var boxData;
    // function fo() {
    //     const options = {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         body: JSON.stringify(boxData)
    //     }
    //     fetch('/checkinUp', options).then((res) => {
    //         console.log(res.status + "\n" + res.xCoor)
    //     })
    // }
    // function getHim() {
    //     const options = {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         body: JSON.stringify(boxData)
    //     }
    //     fetch('/resize/uploads/<%=name%>',options).then((res) => {
    //         console.log(res)
    //     })
    // }
    var keyEle = []
    keyEle = document.getElementById("myKeys").value
    separratedKeyEle = keyEle.split(',')
    console.log(typeof(separratedKeyEle))
    for(var i=0;i<keyEle.length;i++) {
        console.log(separratedKeyEle[i])
    }
    

    // Font-color Dom
    function changeFontColor() {
        var k = document.getElementById("oh").value;
        document.getElementById("h").innerHTML = k;
        document.getElementById("h").value = k;

    }

    //Get the dimensions
    // var widt = document.getElementById('widt').innerHTML
    // var heig = document.getElementById('heig').innerHTML
    // const ratio = widt / heig
    // console.log("ratio:" + ratio)

    //Build Canvas
    const canvas = document.getElementById('hotspot_image');
    var ctx = canvas.getContext('2d'),
        rect = {},
        drag = false,
        mouseX,
        mouseY,
        closeEnough = 5,
        dragTL = dragBL = dragTR = dragBR = false;

    //Event listener for selecting coordinates
    function init() {
        canvas.addEventListener('mousedown', mouseDown, false);
        canvas.addEventListener('mouseup', mouseUp, false);
        canvas.addEventListener('mousemove', mouseMove, false);

        rect = {
            startX: 100,
            startY: 200,
            w: 300,
            h: 200
        }
    }

    function mouseDown(e) {
        mouseX = e.pageX - this.offsetLeft;
        mouseY = e.pageY - this.offsetTop;

        // if there isn't a rect yet
        if (rect.w === undefined) {
            rect.startX = mouseY;
            rect.startY = mouseX;
            dragBR = true;
        }

        // if there is, check which corner
        //   (if any) was clicked
        //
        // 4 cases:
        // 1. top left
        else if (checkCloseEnough(mouseX, rect.startX) && checkCloseEnough(mouseY, rect.startY)) {
            dragTL = true;
        }
        // 2. top right
        else if (checkCloseEnough(mouseX, rect.startX + rect.w) && checkCloseEnough(mouseY, rect.startY)) {
            dragTR = true;

        }
        // 3. bottom left
        else if (checkCloseEnough(mouseX, rect.startX) && checkCloseEnough(mouseY, rect.startY + rect.h)) {
            dragBL = true;

        }
        // 4. bottom right
        else if (checkCloseEnough(mouseX, rect.startX + rect.w) && checkCloseEnough(mouseY, rect.startY + rect.h)) {
            dragBR = true;

        }
        // (5.) none of them
        else {
            // handle not resizing
        }

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw();

    }

    function checkCloseEnough(p1, p2) {
        return Math.abs(p1 - p2) < closeEnough;
    }

    function mouseUp() {
        dragTL = dragTR = dragBL = dragBR = false;
    }

    function mouseMove(e) {
        mouseX = e.pageX - this.offsetLeft;
        mouseY = e.pageY - this.offsetTop;
        if (dragTL) {
            rect.w += rect.startX - mouseX;
            rect.h += rect.startY - mouseY;
            rect.startX = mouseX;
            rect.startY = mouseY;
        } else if (dragTR) {
            rect.w = Math.abs(rect.startX - mouseX);
            rect.h += rect.startY - mouseY;
            rect.startY = mouseY;
        } else if (dragBL) {
            rect.w += rect.startX - mouseX;
            rect.h = Math.abs(rect.startY - mouseY);
            rect.startX = mouseX;
        } else if (dragBR) {
            rect.w = Math.abs(rect.startX - mouseX);
            rect.h = Math.abs(rect.startY - mouseY);
        }
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw();
    }

    function draw() {
        ctx.fillStyle = "#222222";
        var a, b, c, d;
        a = rect.startX;
        b = rect.startY;
        c = rect.w;
        d = rect.h;
        // boxData = {
        //     a, b, c, d
        // }
        document.getElementById("xStart").value = a;
        document.getElementById("yStart").value = b;
        document.getElementById("wid").value = c;
        document.getElementById("hei").value = d;
        ctx.rect(rect.startX, rect.startY, rect.w, rect.h);
        ctx.stroke();
        console.log("startX:" + rect.startX + " startY:" + rect.startY + "\nrect.w:" + rect.w + " rect.h:" + rect.h)
        drawHandles();
    }

    function drawCircle(x, y, radius) {
        ctx.fillStyle = "#FF0000";
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI);
        ctx.fill();
    }

    function drawHandles() {
        drawCircle(rect.startX, rect.startY, closeEnough);
        drawCircle(rect.startX + rect.w, rect.startY, closeEnough);
        drawCircle(rect.startX + rect.w, rect.startY + rect.h, closeEnough);
        drawCircle(rect.startX, rect.startY + rect.h, closeEnough);
    }

    init();

    //to be deleted!
    // can.onclick = function (e) {
    //     console.log("Hello!")
    //     getPosition(e);
    // }

    // //Dot Size
    // var pointSize = 10;

    // //Get coordinates
    // function getPosition(event) {
    //     var rect = can.getBoundingClientRect(); //get position relative to the viewPort
    //     var x = event.clientX - rect.left; //x-coordinate on canvas
    //     var y = event.clientY - rect.top; //y-'''
    //     console.log("x-coordinate:" + x + "\ny-coordinate:" + y)
    //     document.getElementById('x').value = x / wid
    //     document.getElementById('y').value = y / hei
    //     drawCoordinates(x, y);
    // }

    // function drawCoordinates(x, y) {

    //     ctx.clearRect(0, 0, can.width, can.height);
    //     ctx.fillStyle = "#ff2626"; // Red color

    //     ctx.beginPath();
    //     ctx.arc(x, y, pointSize, 0, Math.PI * 2, true);
    //     ctx.fill();
    // }

    // // Show/Hide Preview
    // function myFunction() {
    //     var x = document.getElementById("myDIV");
    //     var y = document.getElementById("ima");
    //     if (x.style.display === "none") {
    //         x.style.display = "block";
    //     } else {
    //         x.style.display = "none";
    //     }
    // }
</script>